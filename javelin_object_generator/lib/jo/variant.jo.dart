// ** WARNING **
// This file is autogenerated by Javelin Object Compiler (joc).
// Do not edit it directly.
//
// ignore_for_file: annotate_overrides
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: directives_ordering
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_import
import 'package:javelin_object/jo_internal.dart';

enum Variant_ActiveElement {
  b,
  i,
  d,
  s,
  variantSet,
  variantList,
  variantMap,
}

class Variant {
  Variant.b(bool b)
    : activeElement = Variant_ActiveElement.b,
      _value = b;

  Variant.i(int i)
    : activeElement = Variant_ActiveElement.i,
      _value = i;

  Variant.d(double d)
    : activeElement = Variant_ActiveElement.d,
      _value = d;

  Variant.s(String s)
    : activeElement = Variant_ActiveElement.s,
      _value = s;

  Variant.variantSet(Set<Variant> variantSet)
    : activeElement = Variant_ActiveElement.variantSet,
      _value = variantSet;

  Variant.variantList(List<Variant> variantList)
    : activeElement = Variant_ActiveElement.variantList,
      _value = variantList;

  Variant.variantMap(Map<Variant, Variant> variantMap)
    : activeElement = Variant_ActiveElement.variantMap,
      _value = variantMap;
  factory Variant.fromObject(Object object) => fromObjectOrNull(object)!;

  static Variant? fromObjectOrNull(Object? object) {
    if (object is bool) {
      return Variant.b(object);
    }
    if (object is int) {
      return Variant.i(object);
    }
    if (object is String) {
      return Variant.s(object);
    }
    if (object is double) {
      return Variant.d(object);
    }
    if (object is List) {
      return Variant.variantList(object.joMapNotNull((e) => Variant.fromObjectOrNull(e as Object)).toList());
    }
    if (object is Set) {
      return Variant.variantSet(object.joMapNotNull((e) => Variant.fromObjectOrNull(e as Object)).toSet());
    }
    if (object is Map) {
      return Variant.variantMap(object.joMapNotNull((k) => Variant.fromObjectOrNull(k as Object), (v) => Variant.fromObjectOrNull(v as Object)));
    }
    return null;
  }

  Variant_ActiveElement activeElement;
  Object _value;

  bool get b => bOrNull!;
  bool? get bOrNull =>
    activeElement == Variant_ActiveElement.b
      ? _value as bool
      : null;
  set b(bool value) {
    activeElement = Variant_ActiveElement.b;
    _value = value;
  }

  int get i => iOrNull!;
  int? get iOrNull =>
    activeElement == Variant_ActiveElement.i
      ? _value as int
      : null;
  set i(int value) {
    activeElement = Variant_ActiveElement.i;
    _value = value;
  }

  double get d => dOrNull!;
  double? get dOrNull =>
    activeElement == Variant_ActiveElement.d
      ? _value as double
      : null;
  set d(double value) {
    activeElement = Variant_ActiveElement.d;
    _value = value;
  }

  String get s => sOrNull!;
  String? get sOrNull =>
    activeElement == Variant_ActiveElement.s
      ? _value as String
      : null;
  set s(String value) {
    activeElement = Variant_ActiveElement.s;
    _value = value;
  }

  Set<Variant> get variantSet => variantSetOrNull!;
  Set<Variant>? get variantSetOrNull =>
    activeElement == Variant_ActiveElement.variantSet
      ? _value as Set<Variant>
      : null;
  set variantSet(Set<Variant> value) {
    activeElement = Variant_ActiveElement.variantSet;
    _value = value;
  }

  List<Variant> get variantList => variantListOrNull!;
  List<Variant>? get variantListOrNull =>
    activeElement == Variant_ActiveElement.variantList
      ? _value as List<Variant>
      : null;
  set variantList(List<Variant> value) {
    activeElement = Variant_ActiveElement.variantList;
    _value = value;
  }

  Map<Variant, Variant> get variantMap => variantMapOrNull!;
  Map<Variant, Variant>? get variantMapOrNull =>
    activeElement == Variant_ActiveElement.variantMap
      ? _value as Map<Variant, Variant>
      : null;
  set variantMap(Map<Variant, Variant> value) {
    activeElement = Variant_ActiveElement.variantMap;
    _value = value;
  }

  Object toObject() {
    switch (activeElement) {
      case Variant_ActiveElement.b:
      case Variant_ActiveElement.i:
      case Variant_ActiveElement.d:
      case Variant_ActiveElement.s:
        return _value;
      case Variant_ActiveElement.variantSet:
        final $variantSet = _value as Set<Variant>;
        return $variantSet.map((e) => e.toObject()).toSet();
      case Variant_ActiveElement.variantList:
        final $variantList = _value as List<Variant>;
        return $variantList.map((e) => e.toObject()).toList();
      case Variant_ActiveElement.variantMap:
        final $variantMap = _value as Map<Variant, Variant>;
        return $variantMap.map((k, v) => MapEntry(k.toObject(), v.toObject()));
    }
  }}

void joRegister() {}
